---
swagger: "2.0"
info:
  version: "v1.2"
  title: "SDIO Discover"
host: "8twxhojma0.execute-api.us-east-1.amazonaws.com"
basePath: "/dev"
schemes:
- "https"
paths:
  /collections:
    get:
      summary: Get Collections
      description: Returns all collections.
      operationId: "getCollections"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcollection"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collections
    post:
      summary: Add Collections
      description: Adds a collection.
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Collections
  /collections/{collection_id}:
    get:
      summary: Get Collection
      description: Returns a single collection.
      operationId: "getCollection"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcollection"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collections
    put:
      summary: Update Collection
      description: Updates a single collection.
      operationId: "updateQueue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "collection"
        required: true
        schema:
          $ref: "#/definitions/collection"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcollection"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Collections
    delete:
      summary: Delete Collection
      description: Deletes a single collection.
      operationId: "deleteCollection"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcollection"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Collections
  /collections/{collection_id}/apis:
    get:
      summary: Get Collection APIs
      description: Returns the APIs for a collection.
      operationId: "getCollectionAPIs"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfapi"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collection APIs
    post:
      summary: Add Collection API
      description: Adds a collection API.
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Collection APIs
  /collections/{collection_id}/apis/{api_id}:
    get:
      summary: Get Collection API
      description: Returns a single collection API.
      operationId: "getCollectionAPI"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfapi"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collection APIs
    put:
      summary: Update Collection API
      description: Updates a single collection API.
      operationId: "updateCollectionAPI"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "api"
        required: true
        schema:
          $ref: "#/definitions/api"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfapi"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Collection APIs
    delete:
      summary: Delete Collection API
      description: Deletes a single collection API.
      operationId: "deleteCollectionAPI"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfapi"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Collection APIs
  /collections/{collection_id}/apis/{api_id}/properties:
    get:
      summary: Get Collection API Properties
      description: Returns collection API properties.
      operationId: "getCollectionAPIProperties"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfproperty"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-properties-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collection API Properties
    post:
      summary: Add Collection API Properties
      description: Adds a collection API property.
      operationId: "addCollectionAPIProperty"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "property"
        required: true
        schema:
          $ref: "#/definitions/property"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfproperty"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-properties-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Collection API Properties
  /collections/{collection_id}/apis/{api_id}/properties/{property_id}:
    get:
      summary: Get Collection API Property
      description: Returns a single collection API property.
      operationId: "getCollectionAPIProperty"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      - name: "property_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfproperty"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-properties-property_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
          integration.request.querystring.property_id: "method.request.path.property_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collection API Properties
    put:
      summary: Update Collection API Property
      description: Updates a single collection API property.
      operationId: "updateCollectionAPIProperty"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      - name: "property_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "property"
        required: true
        schema:
          $ref: "#/definitions/property"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfproperty"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-properties-property_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
          integration.request.querystring.property_id: "method.request.path.property_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Collection API Properties
    delete:
      summary: Delete Collection API Property
      description: Deletes a single collection API propert
      operationId: "deleteCollectionAPIProperty"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      - name: "property_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfproperty"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-properties-property_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
          integration.request.querystring.property_id: "method.request.path.property_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Collection API Properties
  /collections/{collection_id}/apis/{api_id}/tags:
    get:
      summary: Get Collection API Tags
      description: Returns a collection API tags.
      operationId: "getCollectionAPITags"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-tags-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collection API Tags
    post:
      summary: Add Collection API Tag
      description: Adds a single collection API tag.
      operationId: "addCollectionAPITag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "tag"
        required: true
        schema:
          $ref: "#/definitions/tag"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-tags-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Collection API Tags
  /collections/{collection_id}/apis/{api_id}/tags/{tag_id}:
    delete:
      summary: Delete Collection API Tag
      description: Deletes a single collection API tag
      operationId: "deleteCollectionAPITag"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "api_id"
        in: "path"
        required: true
        type: "string"
      - name: "tag_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-apis-api_id-tags-tag_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.api_id: "method.request.path.api_id"
          integration.request.querystring.collection_id: "method.request.path.collection_id"
          integration.request.querystring.tag_id: "method.request.path.tag_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Collection API Tags
  /collections/{collection_id}/publish:
    get:
      summary: Publish Collection
      description: Publish a collection as APIs.json file.
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-publish-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collection Publish
  /collections/{collection_id}/tags:
    get:
      summary: Get Collection Tags
      description: Returns tags for a collection.
      operationId: "getCollectionTags"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-tags-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Collection Tags
    post:
      summary: Add Collection Tag
      description: Adds a tag for a collection.
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-tags-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Collection Tags
  /collections/{collection_id}/tags/{tag_id}:
    delete:
      summary: Delete Collection Tags
      description: Deletes tag for a collection.
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      - name: "tag_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/collections-collection_id-tags-tag_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.collection_id: "method.request.path.collection_id"
          integration.request.querystring.tag_id: "method.request.path.tag_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Collection Tags
  /contracts:
    get:
      summary: Get Contracts
      description: Returns all contracts.
      operationId: "getContracts"
      produces:
      - "application/json"
      parameters:
      - name: "query"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcontracts"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contracts
    post:
      summary: Add Contracts
      description: Adds a contract.
      operationId: "addContract"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "contract"
        required: true
        schema:
          $ref: "#/definitions/contract"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcontract"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contracts
  /contracts/{contract_id}:
    get:
      summary: Get Contract
      description: Returns a single contract.
      operationId: "getContract"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcontract"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contracts
  /contracts/{contract_id}/components/callbacks:
    get:
      summary: Get Contract Callbacks
      description: Returns all the callbacks for a contract.
      operationId: "getContractComponentCallbacks"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcallback"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-callbacks-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Callbacks
    post:
      summary: Add Contract Callback
      description: Adds a single callback for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-callbacks-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Callbacks
  /contracts/{contract_id}/components/callbacks/{callback_id}:
    get:
      summary: Get Contract Callback
      description: Returns a single callback for a contract.
      operationId: "getContractComponentCallback"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "callback_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcallback"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-callbacks-callback_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.callback_id: "method.request.path.callback_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Callbacks
    put:
      summary: Update Contract Callback
      description: Updates a single callback for a contract.
      operationId: "updateContractComponentCallback"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "callback_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "callback"
        required: true
        schema:
          $ref: "#/definitions/callback"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcallback"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-callbacks-callback_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.callback_id: "method.request.path.callback_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Callbacks
    delete:
      summary: Delete Contract Callback
      description: Deletes a single callback for a contract.
      operationId: "deleteContractComponentCallback"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "callback_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcallback"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-callbacks-callback_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.callback_id: "method.request.path.callback_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Callbacks
  /contracts/{contract_id}/components/examples:
    get:
      summary: Get Contract Examples
      description: Returns all examples for a contract.
      operationId: "getContractComponentExamples"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfexample"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-examples-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Examples
    post:
      summary: Add Contract Example
      description: Adds an example for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-examples-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Examples
  /contracts/{contract_id}/components/examples/{example_id}:
    get:
      summary: Get Contract Example
      description: Gets a single example for a contract.
      operationId: "getContractComponentExample"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "example_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfexample"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-examples-example_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.example_id: "method.request.path.example_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Examples
    put:
      summary: Update Contract Example
      description: Updates a single example for a contract.
      operationId: "updateContractComponentExample"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "example_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "example"
        required: true
        schema:
          $ref: "#/definitions/example"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfexample"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-examples-example_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.example_id: "method.request.path.example_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Examples
    delete:
      summary: Delete Contract Example
      description: Deletes a single example for a contract.
      operationId: "deleteContractComponentExamples"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "example_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfexample"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-examples-example_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.example_id: "method.request.path.example_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Examples
  /contracts/{contract_id}/components/headers:
    get:
      summary: Get Contract Headers
      description: Gets all headers for a contract.
      operationId: "getContractComponentHeaders"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfheader"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-headers-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Headers
    post:
      summary: Add Contract Header
      description: Adds a header for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-headers-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Headers
  /contracts/{contract_id}/components/headers/{header_id}:
    get:
      summary: Get Contract Header
      description: Gets a single header for a contract.
      operationId: "getContractComponentHeader"
      produces:
      - "application/json"
      parameters:
      - name: "header_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfheader"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-headers-header_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.header_id: "method.request.path.header_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Headers
    put:
      summary: Update Contract Headers
      description: Updates a single header for a contract.
      operationId: "updateContractComponentHeader"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "header_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "header"
        required: true
        schema:
          $ref: "#/definitions/header"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfheader"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-headers-header_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.header_id: "method.request.path.header_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Headers
    delete:
      summary: Delete Contract Header
      description: Deletes a header for a contract.
      operationId: "deleteContractComponentHeader"
      produces:
      - "application/json"
      parameters:
      - name: "header_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfheader"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-headers-header_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.header_id: "method.request.path.header_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Headers
  /contracts/{contract_id}/components/links:
    get:
      summary: Get Contract Links
      description: Gets all links for a contract.
      operationId: "getContractComponentLinks"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOflink"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-links-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Links
    post:
      summary: Add Contract Link
      description: Adds a link for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-links-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Links
  /contracts/{contract_id}/components/links/{link_id}:
    get:
      summary: Get Contract Link
      description: Gets an individual link for a contract.
      operationId: "getContractComponentLink"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "link_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOflink"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-links-link_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.link_id: "method.request.path.link_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Links
    put:
      summary: Updates Contract Link
      description: Updates an individual link for a contract.
      operationId: "updateContractComponentLink"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "link_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "link"
        required: true
        schema:
          $ref: "#/definitions/link"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOflink"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-links-link_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.link_id: "method.request.path.link_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Links
    delete:
      summary: Deletes Contract Link
      description: Deletes an individual link for a contract.
      operationId: "deleteContractComponentLink"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "link_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOflink"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-links-link_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.link_id: "method.request.path.link_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Links
  /contracts/{contract_id}/components/parameters:
    get:
      summary: Gets Contract Parameters
      description: Gets parameters for a contract.
      operationId: "getContractComponentParameters"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfparameter"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-parameters-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Parameters
    post:
      summary: Adds Contract Parameter
      description: Adds parameter for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-parameters-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Parameters
  /contracts/{contract_id}/components/parameters/{parameter_id}:
    get:
      summary: Gets Contract Parameter
      description: Gets an individual parameter for a contract.
      operationId: "getContractComponentParameter"
      produces:
      - "application/json"
      parameters:
      - name: "parameter_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfparameter"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-parameters-parameter_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.parameter_id: "method.request.path.parameter_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Parameters
    put:
      summary: Updates Contract Parameter
      description: Updates an individual parameter for a contract.
      operationId: "updateContractComponentParameter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "parameter_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "parameter"
        required: true
        schema:
          $ref: "#/definitions/parameter"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfparameter"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-parameters-parameter_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.parameter_id: "method.request.path.parameter_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Parameters
    delete:
      summary: Deletes Contract Parameter
      description: Deletes an individual parameter for a contract.
      operationId: "deleteContractComponentParameters"
      produces:
      - "application/json"
      parameters:
      - name: "parameter_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfparameter"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-parameters-parameter_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.parameter_id: "method.request.path.parameter_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Parameters
  /contracts/{contract_id}/components/paths:
    get:
      summary: Get Contract Paths
      description: Gets all paths for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Paths
    post:
      summary: Add Contract Path
      description: Adds a path for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Paths
  /contracts/{contract_id}/components/paths/{path_id}:
    get:
      summary: Get Contract Path
      description: Gets individual path for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-path_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Paths
    put:
      summary: Updates Contract Path
      description: Updates individual path for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-path_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Paths
    delete:
      summary: Deletes Contract Path
      description: Deletes individual path for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-path_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Paths
  /contracts/{contract_id}/components/paths/{path_id}/operations:
    get:
      summary: Get Contract Operations
      description: Get all operations for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-path_id-path-items-path_item_id-operations-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Path Operations
  /contracts/{contract_id}/components/paths/{path_id}/operations/{operation}:
    get:
      summary: Get Contract Operation
      description: Get an individual operation for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "operation"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-path_id-path-items-path_item_id-operations-operation-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.operation: "method.request.path.operation"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Path Operations
    post:
      summary: Add Contract Operation
      description: Add an operation for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "operation"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-path_id-path-items-path_item_id-operations-operation-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.operation: "method.request.path.operation"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Path Operations
    put:
      summary: Update Contract Operation
      description: Update an individual operation for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "operation"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-path_id-path-items-path_item_id-operations-operation-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.operation: "method.request.path.operation"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Path Operations
    delete:
      summary: Delete Contract Operation
      description: Delete an individual operation for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "operation"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-paths-path_id-path-items-path_item_id-operations-operation-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.operation: "method.request.path.operation"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Path Operations
  /contracts/{contract_id}/components/request-bodies:
    get:
      summary: Get Contract Request Bodies
      description: Get all request bodies for a contract.
      operationId: "getContractComponentRequestBodies"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfrequestBody"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-request-bodies-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Request Bodies
    post:
      summary: Add Contract Request Body
      description: Add a request body for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-request-bodies-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Request Bodies
  /contracts/{contract_id}/components/request-bodies/{requestBody_id}:
    get:
      summary: Get Contract Request Body
      description: Get an individual request body for a contract.
      operationId: "getContractComponentRequestBody"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "requestBody_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfrequestBody"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-request-bodies-request_body_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.request_body_id: "method.request.path.requestBody_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Request Bodies
    put:
      summary: Update Contract Request Body
      description: Update request body for a contract.
      operationId: "updateContractComponentRequestBody"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "requestBody_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "requestBody"
        required: true
        schema:
          $ref: "#/definitions/requestBody"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfrequestBody"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-request-bodies-request_body_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.request_body_id: "method.request.path.requestBody_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Request Bodies
    delete:
      summary: Delete Contract Request Body
      description: Delete request body for a contract.
      operationId: "deleteContractComponentRequestBody"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "requestBody_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfrequestBody"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-request-bodies-request_body_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.request_body_id: "method.request.path.requestBody_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Request Bodies
  /contracts/{contract_id}/components/responses:
    get:
      summary: Get Contract Responses
      description: Get responses for a contract.
      operationId: "getContractComponentResponses"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfresponse"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-responses-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Responses
    post:
      summary: Add Contract Responses
      description: Add response for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-responses-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Responses
  /contracts/{contract_id}/components/responses/{response_id}:
    get:
      summary: Get Contract Response
      description: Get an individual response for a contract.
      operationId: "getContractComponentResponse"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "response_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfresponse"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-responses-response_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.response_id: "method.request.path.response_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Responses
    put:
      summary: Update Contract Response
      description: Update an individual response for a contract.
      operationId: "updateContractComponentResponse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "response_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "response"
        required: true
        schema:
          $ref: "#/definitions/response"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfresponse"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-responses-response_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.response_id: "method.request.path.response_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Responses
    delete:
      summary: Delete Contract Response
      description: Deletes an individual response for a contract.
      operationId: "deleteContractComponentResponses"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "response_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfresponse"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-responses-response_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.response_id: "method.request.path.response_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Responses
  /contracts/{contract_id}/components/schemas:
    get:
      summary: Get Contract Schemas
      description: Get schemas for a contract.
      operationId: "getContractComponentSchemas"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfschema"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-schemas-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Schemas
    post:
      summary: Add Contract Schema
      description: Add schema for a contract.
      operationId: "addContractComponentSchema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "schema"
        required: true
        schema:
          $ref: "#/definitions/schema"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfschema"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-schemas-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Schemas
  /contracts/{contract_id}/components/schemas/{schema_id}:
    get:
      summary: Get Contract Schema
      description: Get an individual schema for a contract.
      operationId: "getContractComponentSchema"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "schema_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfschema"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-schemas-schema_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.schema_id: "method.request.path.schema_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Schemas
    put:
      summary: Update Contract Schema
      description: Update an individual schema for a contract.
      operationId: "updateContractComponentSchema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "schema_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "schema"
        required: true
        schema:
          $ref: "#/definitions/schema"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfschema"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-schemas-schema_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.schema_id: "method.request.path.schema_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Schemas
    delete:
      summary: Delete Contract Schema
      description: Delete an individual schema for a contract.
      operationId: "deleteContractComponentSchemas"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "schema_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfschema"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-schemas-schema_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.schema_id: "method.request.path.schema_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Schemas
  /contracts/{contract_id}/components/security-schemes:
    get:
      summary: Get Contract Security Schemes
      description: Get all security schemes for a contract.
      operationId: "getContractComponentSecuritySchemes"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfsecurityScheme"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-security-schemes-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Security Schemes
    post:
      summary: Add Contract Security Scheme
      description: Add security scheme for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-security-schemes-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Component Security Schemes
  /contracts/{contract_id}/components/security-schemes/{securityScheme_id}:
    get:
      summary: Get Contract Security Scheme
      description: Get an individual security scheme for a contract.
      operationId: "getContractComponentSecurity Scheme"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "securityScheme_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfsecurityScheme"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-security-schemes-security_scheme_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.security_scheme_id: "method.request.path.securityScheme_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Component Security Schemes
    put:
      summary: Update Contract Security Scheme
      description: Update an individual security scheme for a contract.
      operationId: "updateContractComponentSecurity Scheme"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "securityScheme_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "securityScheme"
        required: true
        schema:
          $ref: "#/definitions/securityScheme"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfsecurityScheme"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-security-schemes-security_scheme_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.security_scheme_id: "method.request.path.securityScheme_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Component Security Schemes
    delete:
      summary: Delete Contract Security Scheme
      description: Delete an individual security scheme for a contract.
      operationId: "deleteContractComponentSecurity Scheme"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "securityScheme_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfsecurityScheme"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-components-security-schemes-security_scheme_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.security_scheme_id: "method.request.path.securityScheme_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Component Security Schemes
  /contracts/{contract_id}/info:
    get:
      summary: Get Contract Info
      description: Get info for a contract.
      operationId: "getContractInfo"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfinfo"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-info-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Info
    put:
      summary: Update Contract Info
      description: Update info for a contract.
      operationId: "updateContractInfo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "info"
        required: true
        schema:
          $ref: "#/definitions/info"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfinfo"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-info-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Info
  /contracts/{contract_id}/info/contact:
    get:
      summary: Get Contract Contact
      description: Get contact for a contract.
      operationId: "getContractInfoContact"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcontact"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-info-contact-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Info Contact
    put:
      summary: Update Contract Contact
      description: Update contact for a contract.
      operationId: "updateContractInfoContact"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "contact"
        required: true
        schema:
          $ref: "#/definitions/contact"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfcontact"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-info-contact-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Info Contact
  /contracts/{contract_id}/info/license:
    get:
      summary: Get Contract License
      description: Get license for a contract.
      operationId: "getContractInfoLicense"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOflicense"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-info-license-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Info License
    put:
      summary: Update Contract License
      description: Update license for a contract.
      operationId: "updateContractInfoLicense"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "license"
        required: true
        schema:
          $ref: "#/definitions/license"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOflicense"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-info-license-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Info License
  /contracts/{contract_id}/paths:
    get:
      summary: Get Contract Paths
      description: Get paths for a contract.
      operationId: "getContractPaths"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfpath"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-paths-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Paths
  /contracts/{contract_id}/paths/{path_id}:
    post:
      summary: Add Contract Path
      description: Add path for a contract.
      parameters:
      - name: "path_id"
        in: "path"
        required: true
        type: "string"
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/path"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-paths-path_id-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.path_id: "method.request.path.path_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Paths
  /contracts/{contract_id}/publish:
    get:
      summary: Publish Contract
      description: Publishes a contracts as OpenAPI.
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-publish-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Publish
  /contracts/{contract_id}/servers:
    get:
      summary: Get Contract Servers
      description: Get servers for a contract.
      operationId: "getContractServers"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfserver"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Servers
    post:
      summary: Add Contract Server
      description: Add server for a contract.
      operationId: "addContractServer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "server"
        required: true
        schema:
          $ref: "#/definitions/server"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfserver"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Servers
  /contracts/{contract_id}/servers/{server_id}:
    get:
      summary: Get Contract Server
      description: Get an individual server for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Servers
    put:
      summary: Update Contract Server
      description: Update an individual server for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Servers
    delete:
      summary: Delete Contract Server
      description: Delete an individual server for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Servers
  /contracts/{contract_id}/servers/{server_id}/variables:
    get:
      summary: Get Contract Server Variables
      description: Get server variables for a contract.
      operationId: "getContractServerVariables"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfserverVariable"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-server-variables-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Servers
    post:
      summary: Add Contract Server Variable
      description: Add server variable for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-server-variables-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Servers
  /contracts/{contract_id}/servers/{server_id}/variables/{variable_id}:
    get:
      summary: Get Contract Server Variable
      description: Get individual server variable for a contract.
      operationId: "getContractServerVariable"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      - name: "variable_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfserverVariable"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-server-variables-server_variable_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.server_variable_id: "method.request.path.variable_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Servers
    put:
      summary: Update Contract Server Variable
      description: Update individual server variable for a contract.
      operationId: "addContractServerVariable"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      - name: "variable_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "serverVariable"
        required: true
        schema:
          $ref: "#/definitions/serverVariable"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfserverVariable"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-server-variables-server_variable_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.server_variable_id: "method.request.path.variable_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Servers
    delete:
      summary: Delete Contract Server Variable
      description: Delete individual server variable for a contract.
      operationId: "deleteContractServerVariable"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      - name: "variable_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfserverVariable"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-server-variables-server_variable_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.server_variable_id: "method.request.path.variable_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Servers
  /contracts/{contract_id}/servers/{server_id}/variables/{variable_id}/enums:
    get:
      summary: Get Contract Server Variable Enums
      description: Get enums of an individual server variable for a contract.
      operationId: "getContractServerVariableEnums"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      - name: "variable_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfenum"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-server-variables-server_variable_id-enums-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.server_variable_id: "method.request.path.variable_id"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Servers
  /contracts/{contract_id}/servers/{server_id}/variables/{variable_id}/enums/{enum}:
    post:
      summary: Add Contract Server Variable Enums
      description: Add enum of an individual server variable for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      - name: "variable_id"
        in: "path"
        required: true
        type: "string"
      - name: "enum"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-server-variables-server_variable_id-enums-enum-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.server_variable_id: "method.request.path.variable_id"
          integration.request.querystring.enum: "method.request.path.enum"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Servers
    delete:
      summary: Delete Contract Server Variable Enum
      description: Delete enum of an individual server variable for a contract.
      operationId: "deleteContractServerVariableEnum"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "server_id"
        in: "path"
        required: true
        type: "string"
      - name: "variable_id"
        in: "path"
        required: true
        type: "string"
      - name: "enum"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfenum"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-servers-server_id-server-variables-server_variable_id-enums-enum-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.server_variable_id: "method.request.path.variable_id"
          integration.request.querystring.enum: "method.request.path.enum"
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.server_id: "method.request.path.server_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Servers
  /contracts/{contract_id}/tags:
    get:
      summary: Get Contract Tags
      description: Get tags for a contract.
      operationId: "getContractTags"
      produces:
      - "application/json"
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-tags-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Contract Tags
    post:
      summary: Add Contract Tag
      description: Add tag for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-tags-post.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Contract Tags
  /contracts/{contract_id}/tags/{tag_id}:
    put:
      summary: Update Contract Tag
      description: Update tag for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "tag_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-tags-tag_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.tag_id: "method.request.path.tag_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Contract Tags
    delete:
      summary: Delete Contract Tag
      description: Delete tag for a contract.
      parameters:
      - name: "contract_id"
        in: "path"
        required: true
        type: "string"
      - name: "tag_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/contracts-contract_id-tags-tag_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.contract_id: "method.request.path.contract_id"
          integration.request.querystring.tag_id: "method.request.path.tag_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Contract Tags
  /examples:
    get:
      summary: Get Examples
      description: Returns all examples.
      operationId: "getExamples"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/example"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/examples-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Examples
    post:
      summary: Add Example
      description: Adds an example.
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/examples-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Examples
  /examples/{example_id}:
    get:
      summary: Get Example
      description: Returns an individual example.
      operationId: "getType"
      produces:
      - "application/json"
      parameters:
      - name: "example_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/example"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/examples-example_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.example_id: "method.request.path.example_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Examples
    put:
      summary: Update Example
      description: Update an individual example.
      operationId: "updateExample"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "example_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "example"
        required: true
        schema:
          $ref: "#/definitions/example"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/example"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/examples-example_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.example_id: "method.request.path.example_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Examples
    delete:
      summary: Delete Example
      description: Deletes an individual example.
      operationId: "deleteType"
      produces:
      - "application/json"
      parameters:
      - name: "example_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/example"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/examples-example_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.example_id: "method.request.path.example_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Examples
  /headers:
    get:
      summary: Get Headers
      description: Returns all headers.
      operationId: "getHeaders"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/header"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/headers-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Headers
    post:
      summary: Add Header
      description: Add a header.
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/headers-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Headers
  /headers/{header_id}:
    get:
      summary: Get Header
      description: Returns an individual header.
      operationId: "getHeader"
      produces:
      - "application/json"
      parameters:
      - name: "header_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/header"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/headers-header_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.header_id: "method.request.path.header_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Headers
    put:
      summary: Update Header
      description: Updates an individual header.
      operationId: "updateHeader"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "header_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "header"
        required: true
        schema:
          $ref: "#/definitions/header"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/header"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/headers-header_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.header_id: "method.request.path.header_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Headers
    delete:
      summary: Delete Header
      description: Deletes an individual header.
      operationId: "deleteHeader"
      produces:
      - "application/json"
      parameters:
      - name: "header_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/header"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/headers-header_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.header_id: "method.request.path.header_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Headers
  /intake/apis-json/1:
    get:
      summary: Intake APIs.json V1
      description: Imports a version 1.0 of APIs.json file with path.
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/collection"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-apis-json-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Intake
    post:
      summary: Intake APIs.json V1
      description: Imports a version 1.0 of APIs.json file with body.
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/collection"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-apis-json-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Intake
  /intake/openapi/2:
    get:
      summary: Intake OpenAPI v2
      description: Imports a version 2.0 of OpenAP file with path.
      operationId: "intakeOpenAPI2Path"
      produces:
      - "application/json"
      parameters:
      - name: "path"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfopenapi"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-openapi-2-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Intake
    post:
      summary: Intake OpenAPI v2
      description: Imports a version 2.0 of OpenAP file with body.
      operationId: "intakeOpenAPI2Body"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "openapi"
        required: true
        schema:
          $ref: "#/definitions/openapi"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfopenapi"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-openapi-2-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Intake
  /intake/openapi/3:
    get:
      summary: Intake OpenAPI v3
      description: Imports a version 3.0 of OpenAP file with path.
      operationId: "intakeOpenAPI3Path"
      produces:
      - "application/json"
      parameters:
      - name: "path"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfopenapi"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-openapi-3-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Intake
    post:
      summary: Intake OpenAPI v3
      description: Imports a version 3.0 of OpenAP file with body.
      operationId: "intakeOpenAPIdBody"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "openapi"
        required: true
        schema:
          $ref: "#/definitions/openapi"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfopenapi"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-openapi-3-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Intake
  /intake/queue:
    get:
      summary: Get Intake Queue
      description: Returns all items in the intake queue currently.
      operationId: "getQueue"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfqueue"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-queue-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Intake
  /intake/queue/{queue_id}:
    get:
      summary: Get Intake Queue Item
      description: Returns an individual item from the intake queue.
      operationId: "getQueues"
      produces:
      - "application/json"
      parameters:
      - name: "queue_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfqueue"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-queue-queue_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.queue_id: "method.request.path.queue_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Intake
    put:
      summary: Update Intake Queue Item
      description: Updates an individual item from the intake queue.
      operationId: "updateQueueItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queue_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "queue"
        required: true
        schema:
          $ref: "#/definitions/queue"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfqueue"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-queue-queue_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.queue_id: "method.request.path.queue_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Intake
    delete:
      summary: Delete Intake Queue Item
      description: Deletes an individual item from the intake queue.
      operationId: "deleteQueue"
      produces:
      - "application/json"
      parameters:
      - name: "queue_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfqueue"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-queue-queue_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.queue_id: "method.request.path.queue_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Intake
  /intake/queue/{queue_id}/process:
    get:
      summary: Process Intake Queue Item
      description: Process an individual item from the intake queue.
      produces:
      - "application/json"
      parameters:
      - name: "queue_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/queue"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferror"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/intake-queue-queue_id-process-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.queue_id: "method.request.path.queue_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Intake
  /organizations:
    get:
      summary: Get Organizations
      description: Returns all the organizations.
      operationId: "getOrganizations"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOrganization"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/organizations-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Organizations
    post:
      summary: Add Organizations
      description: Adds an organization.
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/organizations-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Organizations
  /organizations/{organization_id}:
    get:
      summary: Get Organization
      description: Returns an individual organization.
      operationId: "getOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organization_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOrganization"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/organizations-organization_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.organization_id: "method.request.path.organization_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Organizations
    put:
      summary: Update Organization
      description: Updates an individual organization.
      operationId: "updateOrganization"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "organization_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "organization"
        required: true
        schema:
          $ref: "#/definitions/organization"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOrganization"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/organizations-organization_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.organization_id: "method.request.path.organization_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Organizations
    delete:
      summary: Delete Organization
      description: Deletes an individual organization.
      operationId: "deleteOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organization_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOrganization"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/organizations-organization_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.organization_id: "method.request.path.organization_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Organizations
  /parameters:
    get:
      summary: Get Parameters
      description: Gets all parameters.
      operationId: "getParameters"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/parameter"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/parameters-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Parameters
    post:
      summary: Add Parameter
      description: Add parameter.
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/parameters-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Parameters
  /parameters/{parameter_id}:
    get:
      summary: Get Parameter
      description: Gets an individual parameter.
      operationId: "getParameter"
      produces:
      - "application/json"
      parameters:
      - name: "parameter_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/parameter"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/parameters-parameter_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.parameter_id: "method.request.path.parameter_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Parameters
    put:
      summary: Update Parameter
      description: Update an individual parameter.
      operationId: "updateParameter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "parameter_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "parameter"
        required: true
        schema:
          $ref: "#/definitions/parameter"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/parameter"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/parameters-parameter_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.parameter_id: "method.request.path.parameter_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Parameters
    delete:
      summary: Delete Parameter
      description: Delete an individual parameter.
      operationId: "deleteParameter"
      produces:
      - "application/json"
      parameters:
      - name: "parameter_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/parameter"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/parameters-parameter_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.parameter_id: "method.request.path.parameter_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Parameters
  /property-types:
    get:
      summary: Get Property Types
      description: Get all property types.
      operationId: "getPropertyTypes"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftype"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/property-types-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Property Types
    post:
      summary: Add Property Types
      description: Add property type.
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/property-types-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Property Types
  /property-types/{property_type_id}:
    get:
      summary: Get Property Type
      description: Get an individual property type.
      operationId: "getPropertyType"
      produces:
      - "application/json"
      parameters:
      - name: "property_type_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftype"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/property-types-property_type_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.property_type_id: "method.request.path.property_type_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Property Types
    put:
      summary: Update Property Type
      description: Updates an individual property type.
      operationId: "updateType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "property_type_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "type"
        required: true
        schema:
          $ref: "#/definitions/type"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftype"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/property-types-property_type_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.property_type_id: "method.request.path.property_type_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Property Types
    delete:
      summary: Delete Property Type
      description: Deletes an individual property type.
      operationId: "deletePropertyType"
      produces:
      - "application/json"
      parameters:
      - name: "property_type_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftype"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/property-types-property_type_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.property_type_id: "method.request.path.property_type_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Property Types
  /request-bodies:
    get:
      summary: Get Request Bodies
      description: Get all request bodies.
      operationId: "getRequestBody"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/requestBody"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/request-bodies-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Request Bodies
    post:
      summary: Add Request Body
      description: Add request body.
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/request-bodies-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Request Bodies
  /request-bodies/{request_body_id}:
    get:
      summary: Get Request Body
      description: Gets an individual request body.
      operationId: "getRequestBodies"
      produces:
      - "application/json"
      parameters:
      - name: "request_body_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/requestBody"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/request-bodies-request_body_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.request_body_id: "method.request.path.request_body_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Request Bodies
    put:
      summary: Update Request Body
      description: Updates an individual request body.
      operationId: "updateRequestBody"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "request_body_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "requestBody"
        required: true
        schema:
          $ref: "#/definitions/requestBody"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/requestBody"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/request-bodies-request_body_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.request_body_id: "method.request.path.request_body_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Request Bodies
    delete:
      summary: Deletes Request Body
      description: Deletes an individual request body.
      operationId: "deleteRequestBody"
      produces:
      - "application/json"
      parameters:
      - name: "request_body_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/requestBody"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/request-bodies-request_body_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.request_body_id: "method.request.path.request_body_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Request Bodies
  /responses:
    get:
      summary: Get Responses
      description: Gets all responses.
      operationId: "getResponses"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/response"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/responses-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Responses
    post:
      summary: Add Response
      description: Add response.
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/responses-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Responses
  /responses/{response_id}:
    get:
      summary: Get Response
      description: Gets an individual response.
      operationId: "getResponse"
      produces:
      - "application/json"
      parameters:
      - name: "response_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/response"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/responses-response_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.response_id: "method.request.path.response_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Responses
    put:
      summary: Update Response
      description: Update an individual response.
      operationId: "updateResponse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "response_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "response"
        required: true
        schema:
          $ref: "#/definitions/response"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/response"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/responses-response_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.response_id: "method.request.path.response_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Responses
    delete:
      summary: Delete Response
      description: Deletes an individual response.
      operationId: "deleteResponse"
      produces:
      - "application/json"
      parameters:
      - name: "response_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/response"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/responses-response_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.response_id: "method.request.path.response_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Responses
  /tags:
    get:
      summary: Get Tags
      description: Gets all tags.
      operationId: "getTags"
      produces:
      - "application/json"
      parameters:
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/tags-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Tags
    post:
      summary: Add Tag
      description: Adds a tag.
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/tags-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Tags
  /tags/{tag_id}:
    get:
      summary: Get Tag
      description: Gets an individual tag.
      operationId: "getTag"
      produces:
      - "application/json"
      parameters:
      - name: "tag_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/tags-tag_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.tag_id: "method.request.path.tag_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Tags
    put:
      summary: Update Tag
      description: Updates an individual tag.
      operationId: "updateTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "tag_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "tag"
        required: true
        schema:
          $ref: "#/definitions/tag"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/tags-tag_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.tag_id: "method.request.path.tag_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Tags
    delete:
      summary: Delete Tag
      description: Deletes an individual tag.
      operationId: "deleteTag"
      produces:
      - "application/json"
      parameters:
      - name: "tag_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOftag"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/tags-tag_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.tag_id: "method.request.path.tag_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Tags
  /users:
    get:
      summary: Get Users
      description: Gets all users.
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOrganization"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/users-get.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Users
    post:
      summary: Add User
      description: Add a user.
      responses:
        200:
          description: "200 response"
        500:
          description: "500 response"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/users-post.php"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
      tags:
        - Users
  /users/{user_id}:
    get:
      summary: Get User
      description: Returns an individual user.
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOrganization"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/users-user_id-get.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.user_id: "method.request.path.user_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
      tags:
        - Users
    put:
      summary: Update User
      description: Update an individual user.
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "user"
        required: true
        schema:
          $ref: "#/definitions/user"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOrganization"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/users-user_id-put.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.user_id: "method.request.path.user_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
      tags:
        - Users
    delete:
      summary: Delete User
      description: Delete an individual user.
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOrganization"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ArrayOferrorResponse"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: "/discover/users-user_id-delete.php"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.user_id: "method.request.path.user_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
      tags:
        - Users
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
definitions:
  ArrayOfcontact:
    type: "array"
    items:
      $ref: "#/definitions/contact"
  type:
    properties:
      type_id:
        type: "integer"
        description: "The unique id for the type."
      type:
        type: "string"
        description: "The type of the type."
      name:
        type: "string"
        description: "The name of the type."
      slug:
        type: "string"
        description: "The slug of the type."
      description:
        type: "string"
        description: "The description of the type."
    description: "Tags for use across collections and APIs."
  ArrayOfopenapi:
    type: "array"
    items:
      $ref: "#/definitions/openapi"
  ArrayOfapi:
    type: "array"
    items:
      $ref: "#/definitions/api"
  ArrayOfenum:
    type: "array"
    items:
      $ref: "#/definitions/enum"
  ArrayOftag:
    type: "array"
    items:
      $ref: "#/definitions/tag"
  path:
    properties:
      path:
        type: "object"
        description: "The path."
        properties: {}
    description: "The server object."
  ArrayOfpath:
    type: "array"
    items:
      $ref: "#/definitions/path"
  contact:
    properties:
      name:
        type: "string"
        description: "The identifying name of the contact person/organization."
      url:
        type: "string"
        description: "The URL pointing to the contact information. MUST be in the\
          \ format of a URL."
      email:
        type: "string"
        description: "The email address of the contact person/organization. MUST be\
          \ in the format of an email address."
    description: "Contact information for this contract."
  property:
    properties:
      property_id:
        type: "integer"
        description: "The unique id for the property."
      api_id:
        type: "integer"
        description: "The unique id for the property."
      type:
        type: "string"
        description: "The type for the property."
      url:
        type: "string"
        description: "The URL for the property."
    description: "The API property."
  api:
    properties:
      api_id:
        type: "integer"
        description: "The unique id for the API."
      collection_id:
        type: "integer"
        description: "The collection id for the API."
      name:
        type: "integer"
        description: "The name for the API."
      slug:
        type: "integer"
        description: "The slug for the API."
      description:
        type: "integer"
        description: "The description for the API."
      image:
        type: "integer"
        description: "The image for the API."
      human_url:
        type: "integer"
        description: "The human URL for the API."
      base_url:
        type: "integer"
        description: "The base URL for the API."
      properties:
        type: "array"
        items:
          $ref: "#/definitions/property"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/tag"
    description: "Individual APIs."
  tag:
    properties:
      openapi_id:
        type: "integer"
        description: "The unique id for the OpenAPI signal."
    description: "Individual server object."
  ArrayOfinfo:
    type: "array"
    items:
      $ref: "#/definitions/info"
  info:
    properties:
      info_id:
        type: "integer"
        description: "The uniqud for the info object."
    description: "The info object."
  ArrayOferrorResponse:
    type: "array"
    items:
      $ref: "#/definitions/errorResponse"
  openapi:
    properties:
      openapi_id:
        type: "integer"
        description: "The unique id for the OpenAPI signal."
    description: "Individual server object."
  contract:
    required:
    - "openapi"
    properties:
      contract_id:
        type: "integer"
        description: "The uniqud for the OpenAPI contract."
      openapi:
        type: "string"
        description: "This string MUST be the semantic version number of the OpenAPI\
          \ Specification version that the OpenAPI document uses."
      info:
        type: "object"
        properties: {}
      servers:
        type: "array"
        items:
          $ref: "#/definitions/server"
      paths:
        type: "array"
        items:
          $ref: "#/definitions/path"
      components:
        type: "array"
        items:
          $ref: "#/definitions/component"
      security:
        type: "object"
        properties: {}
      tags:
        type: "array"
        items:
          $ref: "#/definitions/tag"
    description: "An individual OpenAPI contract."
  collection:
    properties:
      collection_id:
        type: "integer"
        description: "The unique id for the OpenAPI signal."
      name:
        type: "string"
        description: "The name for the collection."
      slug:
        type: "string"
        description: "The slug for the OpenAPI signal."
      image:
        type: "string"
        description: "The image for the OpenAPI signal."
      rank:
        type: "integer"
        description: "The rank for the OpenAPI signal."
      alexa_rank:
        type: "integer"
        description: "The alexa_rank for the OpenAPI signal."
      created:
        type: "string"
        description: "The created for the OpenAPI signal."
      modified:
        type: "string"
        description: "The modified for the OpenAPI signal."
      url:
        type: "string"
        description: "The url for the OpenAPI signal."
      apis:
        type: "array"
        items:
          $ref: "#/definitions/api"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/tag"
      includes:
        type: "array"
        items:
          $ref: "#/definitions/include"
    description: "Individual collections."
  ArrayOfheader:
    type: "array"
    items:
      $ref: "#/definitions/header"
  ArrayOfqueue:
    type: "array"
    items:
      $ref: "#/definitions/queue"
  ArrayOfserver:
    type: "array"
    items:
      $ref: "#/definitions/server"
  enum:
    properties:
      value:
        type: "string"
        description: "The enum value."
    description: "The enum object."
  ArrayOftype:
    type: "array"
    items:
      $ref: "#/definitions/type"
  license:
    properties:
      name:
        type: "string"
        description: "The license name used for the API."
      url:
        type: "string"
        description: "A URL to the license used for the API. MUST be in the format\
          \ of a URL."
    description: "License information for this contract."
  ArrayOfproperty:
    type: "array"
    items:
      $ref: "#/definitions/property"
  ArrayOfrequestBody:
    type: "array"
    items:
      $ref: "#/definitions/requestBody"
  ArrayOflicense:
    type: "array"
    items:
      $ref: "#/definitions/license"
  header:
    properties:
      name:
        type: "string"
        description: "The name of the parameter. Parameter names are case sensitive."
      in:
        type: "string"
        description: "The location of the parameter. Possible values are only \"header\"\
          ."
      description:
        type: "string"
        description: "A brief description of the parameter."
      required:
        type: "integer"
        description: "Determines whether this parameter is mandatory."
      deprecated:
        type: "integer"
        description: "Specifies that a parameter is deprecated and SHOULD be transitioned\
          \ out of usage."
      allowEmptyValue:
        type: "integer"
        description: "Sets the ability to pass empty-valued parameters."
      style:
        type: "string"
        description: "Describes how the parameter value will be serialized depending\
          \ on the type of the parameter value."
      explode:
        type: "integer"
        description: "When this is true, parameter values of type array or object\
          \ generate separate parameters for each value of the array or key-value\
          \ pair of the map."
      allowReserved:
        type: "integer"
        description: "Determines whether the parameter value SHOULD allow reserved\
          \ characters, as defined by RFC3986"
      schema:
        type: "object"
        description: "Example of the media type."
        properties: {}
      examples:
        type: "object"
        description: "Examples of the media type."
        properties: {}
    description: "The header object."
  ArrayOfserverVariable:
    type: "array"
    items:
      $ref: "#/definitions/serverVariable"
  schema:
    required:
    - "title"
    - "type"
    properties:
      schema_id:
        type: "integer"
        description: "The unique id for the schema."
      title:
        type: "string"
        description: "The title of the schema."
      multipleOf:
        type: "integer"
        description: "The multipleOf of the schema."
      maximum:
        type: "integer"
        description: "The maximum of the schema."
      exclusiveMaximum:
        type: "integer"
        description: "The exclusiveMaximum of the schema."
      minimum:
        type: "integer"
        description: "The minimum of the schema."
      exclusiveMinimum:
        type: "integer"
        description: "The exclusiveMinimum of the schema."
      maxLength:
        type: "integer"
        description: "The maxLength of the schema."
      minLength:
        type: "integer"
        description: "The minLength of the schema."
      pattern:
        type: "string"
        description: "The pattern of the schema."
      maxItems:
        type: "integer"
        description: "The maxItems of the schema."
      minItems:
        type: "integer"
        description: "The minItems of the schema."
      uniqueItems:
        type: "integer"
        description: "The uniqueItems of the schema."
      maxProperties:
        type: "integer"
        description: "The maxProperties of the schema."
      minProperties:
        type: "integer"
        description: "The minProperties of the schema."
      type:
        type: "string"
        description: "The type of the schema."
      description:
        type: "string"
        description: "The description of the schema."
      format:
        type: "string"
        description: "The format of the schema."
      default:
        type: "string"
        description: "The default of the schema."
      allOf:
        type: "object"
        description: "The description of the schema."
        properties: {}
      oneOf:
        type: "object"
        description: "The description of the schema."
        properties: {}
      anyOf:
        type: "object"
        description: "The description of the schema."
        properties: {}
      not:
        type: "object"
        description: "The description of the schema."
        properties: {}
      items:
        type: "object"
        description: "The description of the schema."
        properties: {}
      properties:
        type: "object"
        description: "The description of the schema."
        properties: {}
      additionalProperties:
        type: "object"
        description: "The description of the schema."
        properties: {}
    description: "The schema object."
  server:
    properties:
      server_id:
        type: "integer"
        description: "The unique server id."
      url:
        type: "string"
        title: "The URL of the server."
      description:
        type: "string"
        title: "The description for the server."
    description: "Individual server object."
  link:
    properties:
      operationRef:
        type: "string"
        description: "A relative or absolute reference to an OAS operation."
      operationId:
        type: "string"
        description: "The name of an existing, resolvable OAS operation, as defined\
          \ with a unique operationId."
      parameters:
        type: "string"
        description: "A map representing parameters to pass to an operation as specified\
          \ with operationId or identified via operationRef."
      requestBody:
        type: "string"
        description: "A literal value or {expression} to use as a request body when\
          \ calling the target operation."
      description:
        type: "string"
        description: "A description of the link."
      server:
        type: "object"
        description: "A server object to be used by the target operation."
        properties: {}
    description: "The link object."
  ArrayOfparameter:
    type: "array"
    items:
      $ref: "#/definitions/parameter"
  ArrayOfsecurityScheme:
    type: "array"
    items:
      $ref: "#/definitions/securityScheme"
  contracts:
    properties:
      contract:
        type: "array"
        items:
          $ref: "#/definitions/contract"
    description: "A listing of contracts"
  error:
    properties:
      code:
        type: "integer"
        description: "Repeat the HTTP status code"
      message:
        type: "integer"
        description: "A plain language message explaining the error"
    description: "Describes an HTTP error returned"
  example:
    properties:
      summary:
        type: "string"
        description: "Short description for the example."
      description:
        type: "string"
        description: "Long description for the example."
      value:
        type: "string"
        description: "Any  Embedded literal example."
      externalValue:
        type: "string"
        description: "A URL that points to the literal example."
    description: "The example object."
  ArrayOfcallback:
    type: "array"
    items:
      $ref: "#/definitions/callback"
  ArrayOfresponse:
    type: "array"
    items:
      $ref: "#/definitions/response"
  ArrayOfcontracts:
    type: "array"
    items:
      $ref: "#/definitions/contracts"
  requestBody:
    properties:
      summary:
        type: "string"
        description: "Short description for the example."
      content:
        type: "object"
        description: "The content of the request body."
        properties: {}
      required:
        type: "integer"
        description: "Determines if the request body is required in the request."
    description: "The requestBody object."
  parameter:
    properties:
      in:
        type: "string"
        description: "The location of the parameter. Possible values are \"query\"\
          , \"header\", \"path\" or \"cookie\"."
      name:
        type: "string"
        description: "The name of the parameter. Parameter names are case sensitive."
      description:
        type: "string"
        description: "A brief description of the parameter."
      required:
        type: "integer"
        description: "Determines whether this parameter is mandatory."
      deprecated:
        type: "integer"
        description: "Specifies that a parameter is deprecated and SHOULD be transitioned\
          \ out of usage."
      allowEmptyValue:
        type: "integer"
        description: "Sets the ability to pass empty-valued parameters."
      style:
        type: "string"
        description: "Describes how the parameter value will be serialized depending\
          \ on the type of the parameter value."
      explode:
        type: "integer"
        description: "When this is true, parameter values of type array or object\
          \ generate separate parameters for each value of the array or key-value\
          \ pair of the map."
      allowReserved:
        type: "integer"
        description: "Determines whether the parameter value SHOULD allow reserved\
          \ characters, as defined by RFC3986"
      schema:
        type: "object"
        description: "Example of the media type."
        properties: {}
      examples:
        type: "object"
        description: "Examples of the media type."
        properties: {}
    description: "The parameter object."
  ArrayOfcontract:
    type: "array"
    items:
      $ref: "#/definitions/contract"
  ArrayOrganization:
    type: "array"
    items:
      $ref: "#/definitions/user"
  include:
    properties:
      include_id:
        type: "integer"
        description: "The unique id for the included collection."
      name:
        type: "string"
        description: "The name of the included collection."
      url:
        type: "string"
        description: "The url of the included collection."
    description: "Included collections."
  ArrayOfexample:
    type: "array"
    items:
      $ref: "#/definitions/example"
  ArrayOfcollection:
    type: "array"
    items:
      $ref: "#/definitions/collection"
  ArrayOflink:
    type: "array"
    items:
      $ref: "#/definitions/link"
  ArrayOfschema:
    type: "array"
    items:
      $ref: "#/definitions/schema"
  errorResponse:
    properties:
      code:
        type: "integer"
        description: "Repeat the HTTP status code"
      message:
        type: "integer"
        description: "A plain language message explaining the error"
    description: "Describes an HTTP error returned"
  component:
    properties:
      schemas:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/schema"
      responses:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/response"
      parameters:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/parameter"
      examples:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/example"
      requestBodies:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/requestBody"
      headers:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/header"
      securitySchemes:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/securityScheme"
      links:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/link"
      callbacks:
        type: "array"
        description: "The server object."
        items:
          $ref: "#/definitions/callback"
    description: "The server object."
  serverVariable:
    properties:
      description:
        type: "string"
        description: "An optional description for the server variable."
      default:
        type: "string"
        description: "The default value to use for substitution, and to send, if an\
          \ alternate value is not supplied."
      enum:
        type: "string"
        description: "An enumeration of string values to be used if the substitution\
          \ options are from a limited set."
    description: "The contact object."
  response:
    properties:
      description:
        type: "string"
        description: "A short description of the response."
      headers:
        type: "object"
        description: "The headers for the response."
        properties: {}
      content:
        type: "object"
        description: "The content for the response."
        properties: {}
      links:
        type: "object"
        description: "The links for the response."
        properties: {}
    description: "The response object."
  organization:
    properties:
      name:
        type: "string"
        description: "The name of the organization."
      description:
        type: "string"
        description: "The description of the organization."
    description: "Organizatns for managing collections and contracts."
  securityScheme:
    properties:
      type:
        type: "string"
        description: "The type of the security scheme. Valid values are \"apiKey\"\
          , \"http\", \"oauth2\", \"openIdConnect\"."
      description:
        type: "string"
        description: "A short description for security scheme."
      name:
        type: "string"
        description: "The name of the header, query or cookie parameter to be used."
      in:
        type: "string"
        description: "The location of the API key. Valid values are \"query\", \"\
          header\" or \"cookie\"."
      scheme:
        type: "string"
        description: "The name of the HTTP Authorization scheme to be used in the\
          \ Authorization header as defined in RFC7235."
      bearerFormat:
        type: "string"
        description: "A hint to the client to identify how the bearer token is formatted.\
          \ Bearer tokens are usually generated by an authorization server, so this\
          \ information is primarily for documentation purposes."
      flows:
        type: "string"
        description: "An object containing configuration information for the flow\
          \ types supported."
      openIdConnectUrl:
        type: "string"
        description: "OpenId Connect URL to discover OAuth2 configuration values.\
          \ This MUST be in the form of a URL."
    description: "The contact object."
  callback:
    properties:
      expression:
        type: "object"
        description: "A Path Item Object used to define a callback request and expected\
          \ responses."
        properties: {}
    description: "The callback object."
  ArrayOferror:
    type: "array"
    items:
      $ref: "#/definitions/error"
  user:
    properties:
      name:
        type: "string"
        description: "The name of the user."
      description:
        type: "string"
        description: "The description of the user."
    description: "Organizatns for managing collections and contracts."
  queue:
    properties:
      openapi_id:
        type: "integer"
        description: "The unique id for the OpenAPI signal."
    description: "Individual server object."
